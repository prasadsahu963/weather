// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.DataLayer;

namespace Weather.Api.Migrations
{
    [DbContext(typeof(WeatherContext))]
    partial class WeatherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14");

            modelBuilder.Entity("Weather.DataLayer.Domains.ForecastDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CloudCover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<string>("IconPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WindSpeedUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WindSpeedUnitId");

                    b.ToTable("ForecastDetails");
                });

            modelBuilder.Entity("Weather.DataLayer.Domains.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaxPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("Weather.DataLayer.Domains.UnitMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitMeasures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61b73b2d-9700-4218-8060-709acd6aa7b6"),
                            Unit = "ft",
                            UnitType = 0
                        },
                        new
                        {
                            Id = new Guid("bc44ffb1-44b4-42a1-a5a7-064342c78e02"),
                            Unit = "in",
                            UnitType = 1
                        },
                        new
                        {
                            Id = new Guid("febbb09a-f389-470f-9648-06490333001a"),
                            Unit = "mi",
                            UnitType = 2
                        },
                        new
                        {
                            Id = new Guid("9cdcaf5d-5006-4093-b377-cca17fdc5bb1"),
                            Unit = "mm",
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("1639442b-ab88-4359-88e4-f6b4de83db1b"),
                            Unit = "cm",
                            UnitType = 4
                        },
                        new
                        {
                            Id = new Guid("b4354f46-4c7f-47d1-ad64-a6b0314b3f63"),
                            Unit = "m",
                            UnitType = 5
                        },
                        new
                        {
                            Id = new Guid("7a2ef28d-2451-4a9f-9fc7-78e381c9b8fc"),
                            Unit = "km",
                            UnitType = 6
                        },
                        new
                        {
                            Id = new Guid("89c6af97-4da4-442e-b739-a75caa7c3b37"),
                            Unit = "km/h",
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("de431486-6bf5-4165-a8cb-70536fb3ada5"),
                            Unit = "kt",
                            UnitType = 8
                        },
                        new
                        {
                            Id = new Guid("1bac4b2f-5cf8-4372-a2aa-030226bb6ddb"),
                            Unit = "mi/h",
                            UnitType = 9
                        },
                        new
                        {
                            Id = new Guid("4a8a8c16-83ef-46e1-bdef-6aae89f18a17"),
                            Unit = "m/s",
                            UnitType = 10
                        },
                        new
                        {
                            Id = new Guid("d91a7b90-7d6e-4f22-a193-ab1d2cba0e68"),
                            Unit = "hPa",
                            UnitType = 11
                        },
                        new
                        {
                            Id = new Guid("66c5ac1e-3e37-42e1-93d9-a27a5d1acbda"),
                            Unit = "Hg",
                            UnitType = 12
                        },
                        new
                        {
                            Id = new Guid("50910943-cd41-4952-ab1e-fa048722b3ae"),
                            Unit = "kPa",
                            UnitType = 13
                        },
                        new
                        {
                            Id = new Guid("1a287533-4913-4290-a45a-fe441104373e"),
                            Unit = "mbar",
                            UnitType = 14
                        },
                        new
                        {
                            Id = new Guid("a4811808-8095-4f20-b668-961ab84236ac"),
                            Unit = "mmHg",
                            UnitType = 15
                        },
                        new
                        {
                            Id = new Guid("47aa9f41-f568-47be-af67-50ecd47fe4b8"),
                            Unit = "psi",
                            UnitType = 16
                        },
                        new
                        {
                            Id = new Guid("58f99efa-1f42-4ece-8b7a-0fdfdff4bbd9"),
                            Unit = "C",
                            UnitType = 17
                        },
                        new
                        {
                            Id = new Guid("87fb5cba-743d-41a1-b4a4-38a9405e607d"),
                            Unit = "F",
                            UnitType = 18
                        },
                        new
                        {
                            Id = new Guid("018668fa-a4af-4fdd-8a3f-afb472c86892"),
                            Unit = "K",
                            UnitType = 19
                        },
                        new
                        {
                            Id = new Guid("daafe775-7fc1-4130-aa55-7bf0298d19a3"),
                            Unit = "%",
                            UnitType = 20
                        },
                        new
                        {
                            Id = new Guid("dcde2621-590c-4538-b14a-d3a7809fbf35"),
                            Unit = "f",
                            UnitType = 21
                        },
                        new
                        {
                            Id = new Guid("daa7eec5-9af2-465d-8232-faffe5c8f9cc"),
                            Unit = "int",
                            UnitType = 22
                        });
                });

            modelBuilder.Entity("Weather.DataLayer.Domains.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AirQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationKey")
                        .HasColumnType("int");

                    b.Property<Guid>("NightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RealFeelTemperatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SunRiseTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SunSetTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TemperatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("NightId");

                    b.HasIndex("RealFeelTemperatureId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("Weather.DataLayer.Domains.ForecastDetail", b =>
                {
                    b.HasOne("Weather.DataLayer.Domains.UnitMeasure", "WindSpeedUnit")
                        .WithMany()
                        .HasForeignKey("WindSpeedUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WindSpeedUnit");
                });

            modelBuilder.Entity("Weather.DataLayer.Domains.Temperature", b =>
                {
                    b.HasOne("Weather.DataLayer.Domains.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("Weather.DataLayer.Domains.WeatherForecast", b =>
                {
                    b.HasOne("Weather.DataLayer.Domains.ForecastDetail", "Day")
                        .WithMany()
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.DataLayer.Domains.ForecastDetail", "Night")
                        .WithMany()
                        .HasForeignKey("NightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.DataLayer.Domains.Temperature", "RealFeelTemperature")
                        .WithMany()
                        .HasForeignKey("RealFeelTemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.DataLayer.Domains.Temperature", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Night");

                    b.Navigation("RealFeelTemperature");

                    b.Navigation("Temperature");
                });
#pragma warning restore 612, 618
        }
    }
}
